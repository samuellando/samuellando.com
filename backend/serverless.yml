service: samuellando-pages-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: ca-central-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: pages
    authTableName: authorizations

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  post:
    handler: post.main
    events:
      - http:
          path: pages
          method: post
          cors: true
          authorizer: aws_iam

  get:
      handler: get.main
      events:
        - http:
            path: pages/{id}
            method: get
            cors: true
            authorizer: aws_iam

  put:
    handler: put.main
    events:
      - http:
          path: pages/{id}
          method: put
          cors: true
          authorizer: aws_iam

  authorize:
    handler: authorize.main
    events:
      - http:
          path: authorize/pages/{id}
          method: post
          cors: true
          authorizer: aws_iam

  unauthorize:
    handler: unauthorize.main
    events:
      - http:
          path: unauthorize/pages/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    events:
      - http:
          path: pages
          method: get
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
        path: pages/{id}
        method: delete
        cors: true
        authorizer: aws_iam